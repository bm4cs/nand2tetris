// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /*MUX on the opcode 0=A (address) 1=C (compute)*/
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=instructionOrDataOut);

    /*Only load A register if opcode = 1, or dest bit targets A*/
    Not(in=instruction[15], out=opcodeA);
    Or(a=opcodeA, b=instruction[5], out=loadARegister);
    ARegister(in=instructionOrDataOut, load=loadARegister, out=aregisterOut, out[0..14]=addressM);

    /*Only if dest bit for D=1*/
    And(a=instruction[15], b=instruction[4], out=loadDRegisterIfOpcodeCAndDestBitD);
    DRegister(in=aluOut, load=loadDRegisterIfOpcodeCAndDestBitD, out=dregisterOut);

    /*MUX the 'a' bit 0=A (a register) 1=M (data memory)*/
    Mux16(a=aregisterOut, b=inM, sel=instruction[12], out=aregisterOrDataMemOut);
    ALU(x=dregisterOut, y=aregisterOrDataMemOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zrOut, ng=ngOut);

    /*PC first the inc bit only if no jumps specified*/
    Nand(a=instruction[0], b=instruction[1], out=notJumpPins1Or2);
    And(a=notJumpPins1Or2, b=instruction[2], out=noJumpPins);

    /*The load bit; MUX the 3 jump bits and feed in their condition using */
    /*ALU output pins zr (zero) and ng (not greater than zero).*/
    /*Exapmle j1=0 j2=0 j3=1 is >0, and so on*/
    Or(a=zrOut, b=ngOut, out=zrOrNgOut);
    Not(in=zrOrNgOut, out=zrNorNgOut);
    Not(in=ngOut, out=notNgOut);
    Not(in=zrOut, out=notZrOut);
    Mux8Way(a=false, b=zrNorNgOut, c=zrOut, d=notNgOut, e=ngOut, f=notZrOut, g=zrOrNgOut, h=true, sel=instruction[0..2], out=jumpLoadConditions);
    And(a=instruction[15], b=jumpLoadConditions, out=pcLoadBitOut);

    PC(in=aregisterOut, reset=reset, load=pcLoadBitOut, inc=true, out[0..14]=pc);

    /*Write to memory is dest bit M is set, and opcode=C (compute) to output writeM*/
    And(a=instruction[15], b=instruction[3], out=writeM);
}
